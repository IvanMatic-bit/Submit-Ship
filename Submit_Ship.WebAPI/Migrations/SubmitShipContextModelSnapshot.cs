// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Submit_Ship.WebAPI.Database;

namespace Submit_Ship.WebAPI.Migrations
{
    [DbContext(typeof(SubmitShipContext))]
    partial class SubmitShipContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "Bosnian_Latin_100_BIN")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Submit_Ship.WebAPI.Database.Adresa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("GradId")
                        .HasColumnType("int")
                        .HasColumnName("GradID");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Id");

                    b.HasIndex("GradId");

                    b.ToTable("Adresa");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            GradId = 1,
                            Naziv = "Adresa 1"
                        },
                        new
                        {
                            Id = 2,
                            GradId = 2,
                            Naziv = "Ulica 15"
                        },
                        new
                        {
                            Id = 3,
                            GradId = 2,
                            Naziv = "Neka druga ulica 7A"
                        },
                        new
                        {
                            Id = 4,
                            GradId = 2,
                            Naziv = "Adresa stanovanja 35"
                        },
                        new
                        {
                            Id = 5,
                            GradId = 3,
                            Naziv = "Ulica 2"
                        },
                        new
                        {
                            Id = 6,
                            GradId = 3,
                            Naziv = "Druga ulica bb"
                        },
                        new
                        {
                            Id = 7,
                            GradId = 1,
                            Naziv = "Pedeseta ulica 1"
                        });
                });

            modelBuilder.Entity("Submit_Ship.WebAPI.Database.Drzava", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Id");

                    b.ToTable("Drzava");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Naziv = "Bosna i Hercgovina"
                        },
                        new
                        {
                            Id = 2,
                            Naziv = "Hrvatska"
                        },
                        new
                        {
                            Id = 3,
                            Naziv = "Slovenija"
                        },
                        new
                        {
                            Id = 4,
                            Naziv = "Srbija"
                        },
                        new
                        {
                            Id = 5,
                            Naziv = "Crna Gora"
                        });
                });

            modelBuilder.Entity("Submit_Ship.WebAPI.Database.Grad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DrzavaId")
                        .HasColumnType("int")
                        .HasColumnName("DrzavaID");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Id");

                    b.HasIndex("DrzavaId");

                    b.ToTable("Grad");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DrzavaId = 1,
                            Naziv = "Sarajevo"
                        },
                        new
                        {
                            Id = 2,
                            DrzavaId = 2,
                            Naziv = "Zagreb"
                        },
                        new
                        {
                            Id = 3,
                            DrzavaId = 5,
                            Naziv = "Podgorica"
                        });
                });

            modelBuilder.Entity("Submit_Ship.WebAPI.Database.Isporuka", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AdresaIstovaraId")
                        .HasColumnType("int");

                    b.Property<int>("AdresaUtovaraId")
                        .HasColumnType("int");

                    b.Property<decimal>("Cijena")
                        .HasColumnType("money");

                    b.Property<DateTime>("DatumIsporuke")
                        .HasColumnType("date");

                    b.Property<DateTime>("DatumKreiranja")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DatumPlacanja")
                        .HasColumnType("datetime");

                    b.Property<int>("KamionId")
                        .HasColumnType("int");

                    b.Property<int>("KlijentId")
                        .HasColumnType("int");

                    b.Property<string>("Naslov")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("OpisIsporuke")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("Placeno")
                        .HasColumnType("bit");

                    b.Property<int>("StatusIsporukeId")
                        .HasColumnType("int");

                    b.Property<int>("UslugaId")
                        .HasColumnType("int");

                    b.Property<int>("ZaposlenikId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AdresaIstovaraId");

                    b.HasIndex("AdresaUtovaraId");

                    b.HasIndex("KamionId");

                    b.HasIndex("KlijentId");

                    b.HasIndex("StatusIsporukeId");

                    b.HasIndex("UslugaId");

                    b.HasIndex("ZaposlenikId");

                    b.ToTable("Isporuka");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AdresaIstovaraId = 6,
                            AdresaUtovaraId = 1,
                            Cijena = 300m,
                            DatumIsporuke = new DateTime(2021, 8, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DatumKreiranja = new DateTime(2021, 7, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KamionId = 1,
                            KlijentId = 5,
                            Naslov = "Računarska oprema",
                            OpisIsporuke = "Prijevoz 50 računara",
                            Placeno = false,
                            StatusIsporukeId = 1,
                            UslugaId = 2,
                            ZaposlenikId = 2
                        },
                        new
                        {
                            Id = 2,
                            AdresaIstovaraId = 4,
                            AdresaUtovaraId = 3,
                            Cijena = 350m,
                            DatumIsporuke = new DateTime(2021, 8, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DatumKreiranja = new DateTime(2021, 7, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DatumPlacanja = new DateTime(2021, 8, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KamionId = 2,
                            KlijentId = 5,
                            Naslov = "Krov",
                            OpisIsporuke = "Dostava građe za krov",
                            Placeno = true,
                            StatusIsporukeId = 2,
                            UslugaId = 1,
                            ZaposlenikId = 2
                        },
                        new
                        {
                            Id = 3,
                            AdresaIstovaraId = 6,
                            AdresaUtovaraId = 1,
                            Cijena = 300m,
                            DatumIsporuke = new DateTime(2021, 8, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DatumKreiranja = new DateTime(2021, 7, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KamionId = 1,
                            KlijentId = 5,
                            Naslov = "Računarska oprema",
                            OpisIsporuke = "50 računara",
                            Placeno = false,
                            StatusIsporukeId = 1,
                            UslugaId = 2,
                            ZaposlenikId = 2
                        },
                        new
                        {
                            Id = 4,
                            AdresaIstovaraId = 5,
                            AdresaUtovaraId = 7,
                            Cijena = 300m,
                            DatumIsporuke = new DateTime(2021, 8, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DatumKreiranja = new DateTime(2021, 7, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KamionId = 1,
                            KlijentId = 5,
                            Naslov = "Računarska oprema",
                            OpisIsporuke = "Prijevoz 5 kopir aparata",
                            Placeno = false,
                            StatusIsporukeId = 3,
                            UslugaId = 2,
                            ZaposlenikId = 2
                        },
                        new
                        {
                            Id = 5,
                            AdresaIstovaraId = 6,
                            AdresaUtovaraId = 1,
                            Cijena = 300m,
                            DatumIsporuke = new DateTime(2021, 8, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DatumKreiranja = new DateTime(2021, 8, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KamionId = 1,
                            KlijentId = 6,
                            Naslov = "Građa",
                            OpisIsporuke = "Prijevoz građe za krov",
                            Placeno = false,
                            StatusIsporukeId = 1,
                            UslugaId = 2,
                            ZaposlenikId = 2
                        });
                });

            modelBuilder.Entity("Submit_Ship.WebAPI.Database.Kamion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Cerada")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DatumRegistracije")
                        .HasColumnType("date");

                    b.Property<bool>("Hladnjaca")
                        .HasColumnType("bit");

                    b.Property<bool>("Kiper")
                        .HasColumnType("bit");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<double>("Nosivost")
                        .HasColumnType("float");

                    b.Property<string>("Proizvodac")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<bool>("Reduktor")
                        .HasColumnType("bit");

                    b.Property<bool>("SpavacaKabina")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Kamion");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Cerada = false,
                            DatumRegistracije = new DateTime(2021, 5, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Hladnjaca = true,
                            Kiper = true,
                            Model = "TXG",
                            Nosivost = 5.0,
                            Proizvodac = "MAN",
                            Reduktor = false,
                            SpavacaKabina = true
                        },
                        new
                        {
                            Id = 2,
                            Cerada = false,
                            DatumRegistracije = new DateTime(2021, 4, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Hladnjaca = false,
                            Kiper = false,
                            Model = "Actros",
                            Nosivost = 11.0,
                            Proizvodac = "Mercedes",
                            Reduktor = true,
                            SpavacaKabina = true
                        },
                        new
                        {
                            Id = 3,
                            Cerada = false,
                            DatumRegistracije = new DateTime(2020, 12, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Hladnjaca = true,
                            Kiper = true,
                            Model = "XT",
                            Nosivost = 3.0,
                            Proizvodac = "Volvo",
                            Reduktor = false,
                            SpavacaKabina = true
                        });
                });

            modelBuilder.Entity("Submit_Ship.WebAPI.Database.Korisnik", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("KorisnickoIme")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LozinkaHash")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LozinkaSalt")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Telefon")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("UlogaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UlogaId");

                    b.ToTable("Korisnik");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "administrator@email",
                            Ime = "Administrator",
                            KorisnickoIme = "administrator",
                            LozinkaHash = "AQOLGG51+PLId3kLERGS0Tyeg2U=",
                            LozinkaSalt = "r7LG9jEjUkH99aEnX7ZWag==",
                            Prezime = "Administrator",
                            Status = true,
                            Telefon = "061111",
                            UlogaId = 1
                        },
                        new
                        {
                            Id = 2,
                            Email = "vozac@email.com",
                            Ime = "Vozač",
                            KorisnickoIme = "vozac",
                            LozinkaHash = "8HlNBy94fXCNje4lhCwaTJdlwi4=",
                            LozinkaSalt = "HVhjHLl6KoazLHDfql3q+w==",
                            Prezime = "Vozač",
                            Status = true,
                            Telefon = "061222",
                            UlogaId = 2
                        },
                        new
                        {
                            Id = 3,
                            Email = "menadzer@email.com",
                            Ime = "Menadžer",
                            KorisnickoIme = "menadzer",
                            LozinkaHash = "wAmf7OkWQK+4+3FRWKGL0UkRH6I=",
                            LozinkaSalt = "gi3Oh6JyZD+VMc2m9HTOXg==",
                            Prezime = "Menadžer",
                            Status = true,
                            Telefon = "061333",
                            UlogaId = 3
                        },
                        new
                        {
                            Id = 4,
                            Email = "mehanicar@email.com",
                            Ime = "Mehaničar",
                            KorisnickoIme = "mehanicar",
                            LozinkaHash = "R+mN9HvnlM4aOrMAQvQsnEIetVQ=",
                            LozinkaSalt = "2H+NMGBsLKz67XTKTiju2Q==",
                            Prezime = "Mehaničar",
                            Status = true,
                            Telefon = "061444",
                            UlogaId = 4
                        },
                        new
                        {
                            Id = 5,
                            Email = "klijent@email.com",
                            Ime = "Klijent",
                            KorisnickoIme = "klijent",
                            LozinkaHash = "hDUt/6Jce3t2Dh+mm9YV8EW/L1Q=",
                            LozinkaSalt = "4+RrG6jFYObobL4A3C4kxg==",
                            Prezime = "Klijent",
                            Status = true,
                            Telefon = "061555",
                            UlogaId = 5
                        },
                        new
                        {
                            Id = 6,
                            Email = "kldrugi@email.com",
                            Ime = "Drugi",
                            KorisnickoIme = "drugiklijent",
                            LozinkaHash = "NawkUhItr4YrOTVIqDxrGmzVoj0=",
                            LozinkaSalt = "ShT7ywenue7fPAiHZ7DkkQ==",
                            Prezime = "Klijent",
                            Status = true,
                            Telefon = "061555",
                            UlogaId = 5
                        });
                });

            modelBuilder.Entity("Submit_Ship.WebAPI.Database.Kvar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("KamionId")
                        .HasColumnType("int");

                    b.Property<string>("Komentar")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Sadrzaj")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("VozacId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("KamionId");

                    b.HasIndex("VozacId");

                    b.ToTable("Kvar");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            KamionId = 2,
                            Komentar = "Potrebo nasuti ulje",
                            Sadrzaj = "Problem sa mjenjačem",
                            VozacId = 2
                        },
                        new
                        {
                            Id = 2,
                            KamionId = 3,
                            Sadrzaj = "Problem sa pritiskom ulja",
                            VozacId = 2
                        },
                        new
                        {
                            Id = 3,
                            KamionId = 2,
                            Komentar = "Potrebno zamijeniti grijače",
                            Sadrzaj = "Kamion teško pali zimi",
                            VozacId = 2
                        },
                        new
                        {
                            Id = 4,
                            KamionId = 1,
                            Sadrzaj = "Volan se trese prilikom kočenja",
                            VozacId = 2
                        },
                        new
                        {
                            Id = 5,
                            KamionId = 2,
                            Komentar = "Potrebo nasuti ulje",
                            Sadrzaj = "Problem sa servo pumpom",
                            VozacId = 2
                        });
                });

            modelBuilder.Entity("Submit_Ship.WebAPI.Database.StatusIsporuke", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.ToTable("StatusIsporuke");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Naziv = "Isporučuje se"
                        },
                        new
                        {
                            Id = 2,
                            Naziv = "Isporučeno"
                        },
                        new
                        {
                            Id = 3,
                            Naziv = "Novo"
                        },
                        new
                        {
                            Id = 4,
                            Naziv = "Prekinuto"
                        },
                        new
                        {
                            Id = 5,
                            Naziv = "Utovara se"
                        },
                        new
                        {
                            Id = 6,
                            Naziv = "Istovara se"
                        });
                });

            modelBuilder.Entity("Submit_Ship.WebAPI.Database.StatusZahtjeva", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.ToTable("StatusZahtjeva");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Naziv = "Novi"
                        },
                        new
                        {
                            Id = 2,
                            Naziv = "Odobren"
                        },
                        new
                        {
                            Id = 3,
                            Naziv = "Odbijen"
                        });
                });

            modelBuilder.Entity("Submit_Ship.WebAPI.Database.Uloga", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.ToTable("Uloga");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Naziv = "Administrator"
                        },
                        new
                        {
                            Id = 2,
                            Naziv = "Vozač"
                        },
                        new
                        {
                            Id = 3,
                            Naziv = "Menadžer"
                        },
                        new
                        {
                            Id = 4,
                            Naziv = "Mehaničar"
                        },
                        new
                        {
                            Id = 5,
                            Naziv = "Klijent"
                        });
                });

            modelBuilder.Entity("Submit_Ship.WebAPI.Database.Usluga", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Cijena")
                        .HasColumnType("money");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Opis")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Usluga");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Cijena = 250m,
                            Naziv = "Građa",
                            Opis = "Stubovi, grede, daske"
                        },
                        new
                        {
                            Id = 2,
                            Cijena = 350m,
                            Naziv = "Računari i oprema",
                            Opis = "Kompjuteri, printeri, monitori"
                        },
                        new
                        {
                            Id = 3,
                            Cijena = 400m,
                            Naziv = "Staklo",
                            Opis = "Prozori i lako lomljivi teret"
                        },
                        new
                        {
                            Id = 4,
                            Cijena = 200m,
                            Naziv = "Namještaj",
                            Opis = "Inventar restorana ili poslovnih prostora"
                        });
                });

            modelBuilder.Entity("Submit_Ship.WebAPI.Database.Zahtjev", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DatumVrijemeZahtjeva")
                        .HasColumnType("datetime");

                    b.Property<int>("KlijentId")
                        .HasColumnType("int");

                    b.Property<string>("Naslov")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Sadrzaj")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("StatusZahtjevaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("KlijentId");

                    b.HasIndex("StatusZahtjevaId");

                    b.ToTable("Zahtjev");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DatumVrijemeZahtjeva = new DateTime(2021, 8, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KlijentId = 5,
                            Naslov = "Računarska oprema",
                            Sadrzaj = "Potreban prijevoz 50 računara dana 2.8.2021 sa adrese Adresa 1,Sarajevo do Druga ulica bb",
                            StatusZahtjevaId = 2
                        },
                        new
                        {
                            Id = 2,
                            DatumVrijemeZahtjeva = new DateTime(2021, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KlijentId = 5,
                            Naslov = "Krov",
                            Sadrzaj = "Potrebna dostava građe od Neka druga ulica, Zagreb do Pedeseta ulica,Sarajevo",
                            StatusZahtjevaId = 2
                        },
                        new
                        {
                            Id = 3,
                            DatumVrijemeZahtjeva = new DateTime(2021, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KlijentId = 5,
                            Naslov = "Računarska oprema",
                            Sadrzaj = "Potreban prijevoz 50 računara dana  do Druga ulica bb",
                            StatusZahtjevaId = 3
                        },
                        new
                        {
                            Id = 4,
                            DatumVrijemeZahtjeva = new DateTime(2021, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KlijentId = 5,
                            Naslov = "Krov",
                            Sadrzaj = "Potrebna dostava građe od Pedeseta ulica Sarajevo do Ulica 2, Podgorica",
                            StatusZahtjevaId = 2
                        },
                        new
                        {
                            Id = 5,
                            DatumVrijemeZahtjeva = new DateTime(2021, 10, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KlijentId = 5,
                            Naslov = "Računarska oprema",
                            Sadrzaj = "Potreban prijevoz 5 kopir aparata",
                            StatusZahtjevaId = 1
                        },
                        new
                        {
                            Id = 6,
                            DatumVrijemeZahtjeva = new DateTime(2021, 10, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KlijentId = 6,
                            Naslov = "Računarska oprema",
                            Sadrzaj = "Potreban prijevoz 5 kopir aparata dana 08.09.2021. Adresa preuzimanja adresa1, Sarajevo, adresa dostave Ulica 15 Sarajevo",
                            StatusZahtjevaId = 1
                        },
                        new
                        {
                            Id = 7,
                            DatumVrijemeZahtjeva = new DateTime(2021, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KlijentId = 5,
                            Naslov = "Krov",
                            Sadrzaj = "Potrebna dostava građe od Pedeseta ulica Sarajevo do Ulica 2, Podgorica datuma 08.10.2021",
                            StatusZahtjevaId = 2
                        });
                });

            modelBuilder.Entity("Submit_Ship.WebAPI.Database.Adresa", b =>
                {
                    b.HasOne("Submit_Ship.WebAPI.Database.Grad", "Grad")
                        .WithMany("Adresas")
                        .HasForeignKey("GradId")
                        .HasConstraintName("FK_GradID")
                        .IsRequired();

                    b.Navigation("Grad");
                });

            modelBuilder.Entity("Submit_Ship.WebAPI.Database.Grad", b =>
                {
                    b.HasOne("Submit_Ship.WebAPI.Database.Drzava", "Drzava")
                        .WithMany("Grads")
                        .HasForeignKey("DrzavaId")
                        .HasConstraintName("FK_DrzavaID")
                        .IsRequired();

                    b.Navigation("Drzava");
                });

            modelBuilder.Entity("Submit_Ship.WebAPI.Database.Isporuka", b =>
                {
                    b.HasOne("Submit_Ship.WebAPI.Database.Adresa", "AdresaIstovara")
                        .WithMany("IsporukaAdresaIstovaras")
                        .HasForeignKey("AdresaIstovaraId")
                        .HasConstraintName("FK_AdresaItovara")
                        .IsRequired();

                    b.HasOne("Submit_Ship.WebAPI.Database.Adresa", "AdresaUtovara")
                        .WithMany("IsporukaAdresaUtovaras")
                        .HasForeignKey("AdresaUtovaraId")
                        .HasConstraintName("FK_AdresaUtovara")
                        .IsRequired();

                    b.HasOne("Submit_Ship.WebAPI.Database.Kamion", "Kamion")
                        .WithMany("Isporukas")
                        .HasForeignKey("KamionId")
                        .HasConstraintName("FK_IsporukaKamion")
                        .IsRequired();

                    b.HasOne("Submit_Ship.WebAPI.Database.Korisnik", "Klijent")
                        .WithMany("IsporukaKlijents")
                        .HasForeignKey("KlijentId")
                        .HasConstraintName("FK_IsporukaKlijent")
                        .IsRequired();

                    b.HasOne("Submit_Ship.WebAPI.Database.StatusIsporuke", "StatusIsporuke")
                        .WithMany("Isporukas")
                        .HasForeignKey("StatusIsporukeId")
                        .HasConstraintName("FK_IsporukaStatus")
                        .IsRequired();

                    b.HasOne("Submit_Ship.WebAPI.Database.Usluga", "Usluga")
                        .WithMany("Isporukas")
                        .HasForeignKey("UslugaId")
                        .HasConstraintName("FK_IsporukaUsluga")
                        .IsRequired();

                    b.HasOne("Submit_Ship.WebAPI.Database.Korisnik", "Zaposlenik")
                        .WithMany("IsporukaZaposleniks")
                        .HasForeignKey("ZaposlenikId")
                        .HasConstraintName("FK_IsporukaVozac")
                        .IsRequired();

                    b.Navigation("AdresaIstovara");

                    b.Navigation("AdresaUtovara");

                    b.Navigation("Kamion");

                    b.Navigation("Klijent");

                    b.Navigation("StatusIsporuke");

                    b.Navigation("Usluga");

                    b.Navigation("Zaposlenik");
                });

            modelBuilder.Entity("Submit_Ship.WebAPI.Database.Korisnik", b =>
                {
                    b.HasOne("Submit_Ship.WebAPI.Database.Uloga", "Uloga")
                        .WithMany("Korisniks")
                        .HasForeignKey("UlogaId")
                        .HasConstraintName("FK_UlogaZaposlenik")
                        .IsRequired();

                    b.Navigation("Uloga");
                });

            modelBuilder.Entity("Submit_Ship.WebAPI.Database.Kvar", b =>
                {
                    b.HasOne("Submit_Ship.WebAPI.Database.Kamion", "Kamion")
                        .WithMany("Kvars")
                        .HasForeignKey("KamionId")
                        .HasConstraintName("FK_KvarKamion")
                        .IsRequired();

                    b.HasOne("Submit_Ship.WebAPI.Database.Korisnik", "Vozac")
                        .WithMany("Kvars")
                        .HasForeignKey("VozacId")
                        .HasConstraintName("FK_KvarVozac")
                        .IsRequired();

                    b.Navigation("Kamion");

                    b.Navigation("Vozac");
                });

            modelBuilder.Entity("Submit_Ship.WebAPI.Database.Zahtjev", b =>
                {
                    b.HasOne("Submit_Ship.WebAPI.Database.Korisnik", "Klijent")
                        .WithMany("Zahtjevs")
                        .HasForeignKey("KlijentId")
                        .HasConstraintName("FK_ZahtjevKlijent")
                        .IsRequired();

                    b.HasOne("Submit_Ship.WebAPI.Database.StatusZahtjeva", "StatusZahtjeva")
                        .WithMany("Zahtjevs")
                        .HasForeignKey("StatusZahtjevaId")
                        .HasConstraintName("FK_StatusZahtjeva")
                        .IsRequired();

                    b.Navigation("Klijent");

                    b.Navigation("StatusZahtjeva");
                });

            modelBuilder.Entity("Submit_Ship.WebAPI.Database.Adresa", b =>
                {
                    b.Navigation("IsporukaAdresaIstovaras");

                    b.Navigation("IsporukaAdresaUtovaras");
                });

            modelBuilder.Entity("Submit_Ship.WebAPI.Database.Drzava", b =>
                {
                    b.Navigation("Grads");
                });

            modelBuilder.Entity("Submit_Ship.WebAPI.Database.Grad", b =>
                {
                    b.Navigation("Adresas");
                });

            modelBuilder.Entity("Submit_Ship.WebAPI.Database.Kamion", b =>
                {
                    b.Navigation("Isporukas");

                    b.Navigation("Kvars");
                });

            modelBuilder.Entity("Submit_Ship.WebAPI.Database.Korisnik", b =>
                {
                    b.Navigation("IsporukaKlijents");

                    b.Navigation("IsporukaZaposleniks");

                    b.Navigation("Kvars");

                    b.Navigation("Zahtjevs");
                });

            modelBuilder.Entity("Submit_Ship.WebAPI.Database.StatusIsporuke", b =>
                {
                    b.Navigation("Isporukas");
                });

            modelBuilder.Entity("Submit_Ship.WebAPI.Database.StatusZahtjeva", b =>
                {
                    b.Navigation("Zahtjevs");
                });

            modelBuilder.Entity("Submit_Ship.WebAPI.Database.Uloga", b =>
                {
                    b.Navigation("Korisniks");
                });

            modelBuilder.Entity("Submit_Ship.WebAPI.Database.Usluga", b =>
                {
                    b.Navigation("Isporukas");
                });
#pragma warning restore 612, 618
        }
    }
}
